import com.satergo.build.SatergoBuildPlugin

plugins {
	id 'java'
	id 'application'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: SatergoBuildPlugin

java {
	sourceCompatibility = JavaLanguageVersion.of(20)
}

group 'com.satergo'
version '1.5.1'

application {
	mainClass = "com.satergo.Launcher"
	applicationName = project.name
}

repositories {
	mavenCentral()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	// for org.jetbrains.pty4j:purejavacomm:0.12.5, which is used by pty4j
	maven {
		url 'https://packages.jetbrains.team/maven/p/ij/intellij-dependencies'
		content {
			includeGroup 'org.jetbrains.pty4j'
		}
	}
}

boolean platformProvided = project.hasProperty("platform")
String platform
if (platformProvided && project.findProperty("platform") != "auto") {
	// for releasing
	platform = project.findProperty("platform")
} else {
	// for running
	def currentOs = org.gradle.internal.os.OperatingSystem.current()
	if (currentOs.isLinux()) platform = "linux"
	else if (currentOs.isMacOsX()) platform = "mac"
	else if (currentOs.isWindows()) platform = "win"
	else throw new IllegalArgumentException("unknown operating system")

	def arch = System.getProperty("os.arch")
	if (arch != "amd64") platform += "-" + arch
}

def javaFxVersion = '20.0.1'
def javaFxModules = [ 'base', 'controls', 'fxml', 'graphics' ]

configurations {
	jna
}

dependencies {
	implementation ('com.pixelduke:FXSkins:1.0.0') {
		exclude group: 'org.openjfx'
		exclude group: 'org.controlsfx'
	}
	implementation 'org.fxmisc.flowless:flowless:0.7.0'

	implementation 'org.ergoplatform:ergo-appkit_2.12:5.0.1'
	implementation 'com.typesafe:config:1.4.2'
	implementation 'org.slf4j:slf4j-simple:1.7.36'
	implementation 'com.grack:nanojson:1.8' // used for numerous HTTP APIs and ProgramData saving
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'org.jetbrains.pty4j:pty4j:0.12.10' // for running node
	implementation 'info.debatty:java-string-similarity:2.0.0' // used for mnemonic phrase words
	implementation 'com.google.zxing:core:3.5.1' // used for qr codes
	jna 'net.java.dev.jna:jna:5.11.0' // used for running the registration of ergo uri with admin privileges on Windows
	implementation configurations.jna.dependencies
	implementation 'net.java.dev.jna:jna-platform:5.11.0' // used for running the registration of ergo uri with admin privileges on Windows
	javaFxModules.forEach({ md -> implementation "org.openjfx:javafx-$md:$javaFxVersion:$platform" })
}

jar {
	manifest.attributes(
			"Specification-Version": project.version,
			"Satergo-Package-Type": "PORTABLE",
			"Satergo-Package-Platform": platform)
}

satergoRuntime {

	extraModules = ["jdk.crypto.ec", "java.naming", "jdk.charsets"]
	extraJlinkOptions = ["--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"]
	cleanupRuntimeContent = true
	cacheRuntimes = true

	runProguard = !project.hasProperty("dontshrink")
	proguardConfig = file("proguard.pro").toPath()
	proguardOutputName = "Satergo-${project.version}-${platform}-shrunk.jar"

	includeJarInRuntime = true

	launcherScript {
		type = platform == "win" ? "bat" : "sh"
		name = "Satergo"
		mainClass = application.mainClass.get()
		defaultJvmOpts = ['-Dsatergo.launcher={APP_HOME}/bin/Satergo',
						  '-Dsatergo.platform=' + platform ]
		windowsConsole = false
	}

	switch (platform) {
		case "linux": {
			platformName = "linux-x64"
			jdkRuntimeURI = URI.create("https://download.java.net/java/GA/jdk20.0.1/b4887098932d415489976708ad6d1a4b/9/GPL/openjdk-20.0.1_linux-x64_bin.tar.gz")
			break
		}
		case "linux-aarch64": {
			platformName = "linux-aarch64"
			jdkRuntimeURI = URI.create("https://download.java.net/java/GA/jdk20.0.1/b4887098932d415489976708ad6d1a4b/9/GPL/openjdk-20.0.1_linux-aarch64_bin.tar.gz")
			break
		}
		case "win": {
			platformName = "windows-x64"
			jdkRuntimeURI = URI.create("https://download.java.net/java/GA/jdk20.0.1/b4887098932d415489976708ad6d1a4b/9/GPL/openjdk-20.0.1_windows-x64_bin.zip")
			break
		}
		case "mac": {
			platformName = "mac-x64"
			jdkRuntimeURI = URI.create("https://download.java.net/java/GA/jdk20.0.1/b4887098932d415489976708ad6d1a4b/9/GPL/openjdk-20.0.1_macos-x64_bin.tar.gz")
			jdkRuntimeRoot = "Contents/Home/"
			break
		}
		case "mac-aarch64": {
			platformName = "mac-aarch64"
			jdkRuntimeURI = URI.create("https://download.java.net/java/GA/jdk20.0.1/b4887098932d415489976708ad6d1a4b/9/GPL/openjdk-20.0.1_macos-aarch64_bin.tar.gz")
			break
		}
		default: throw new IllegalArgumentException()
	}

	createArchive = true
	archiveOutputPath = file("runtimes/${project.name}-v${project.version}-${platformName}.zip").toPath()

	// Create a convenient run file in the top level
	doBeforeArchival {
		if (platform == "win") {
			def runFile = file("${buildDir}/${runtimeDirectoryName}/run.bat")
			runFile.write('@start /min "" "%~dp0\\bin\\' + project.name + '.bat" %*')
		} else {
			def runFile = file("${buildDir}/${runtimeDirectoryName}/run.${platform.startsWith("mac") ? "command" : "sh"}")
			runFile.write('#!/bin/sh\n' +
					'eval "\\"$(dirname "$0")/bin/' + project.name + '\\" $*"')
			runFile.setExecutable(true)
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

// Make builds reproducible
tasks.withType(AbstractArchiveTask).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

shadowJar {
	if (platformProvided) {
		String jnaPlatform = (!platform.contains("-") ? platform + "-x86-64" : platform)
				.replaceFirst("^mac-", "darwin-")
				.replaceFirst("^win-", "win32-")
		List<String> platformList = jnaPlatformList()
		if (!platformList.contains(jnaPlatform))
			throw new RuntimeException("could not find jna platform " + jnaPlatform + " (from " + platform + ")")
		platformList.remove(jnaPlatform)
		platformList.forEach {
			exclude "com/sun/jna/${it}/**"
		}
	}
	doFirst {
		if (!platformProvided)
			println "Desired platform was not provided. Extra JNA platforms will not be filtered out from the final JAR."
	}
}

ArrayList<String> jnaPlatformList() {
	return new java.util.jar.JarFile(configurations.jna.files.first()).stream()
			.filter({ it.name.startsWith("com/sun/jna/") && it.name.count("/") == 4 && it.directory && it.name.contains('-') })
			.map({ it.name.split("/").last() })
			.collect(java.util.stream.Collectors.toCollection(ArrayList::new))
}