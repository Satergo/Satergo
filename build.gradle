import com.satergo.build.SatergoBuildPlugin

plugins {
	id 'java'
	id 'application'
	id 'com.gradleup.shadow' version '8.3.0'
}

apply plugin: SatergoBuildPlugin

java {
	sourceCompatibility = JavaLanguageVersion.of(22)
	toolchain {
		languageVersion = JavaLanguageVersion.of(22)
	}
}

group 'com.satergo'
version '1.8.0'
def versionCode = 10

application {
	mainClass = "com.satergo.Launcher"
	applicationName = project.name
}

repositories {
	mavenCentral()
	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots/'
		content { includeGroup 'org.scorexfoundation' }
	}
}

boolean buildInstaller = project.hasProperty("buildInstaller")
boolean platformProvided = project.hasProperty("platform")
String platform
if (platformProvided && project.findProperty("platform") != "auto") {
	// for releasing
	platform = project.findProperty("platform")
} else {
	// for running
	def currentOs = org.gradle.internal.os.OperatingSystem.current()
	if (currentOs.isLinux()) platform = "linux"
	else if (currentOs.isMacOsX()) platform = "mac"
	else if (currentOs.isWindows()) platform = "win"
	else throw new IllegalArgumentException("unknown operating system")

	def arch = System.getProperty("os.arch")
	if (arch != "amd64") platform += "-" + arch
}

def javaFxVersion = '23'
def javaFxModules = [ 'base', 'controls', 'fxml', 'graphics' ]

configurations {
	javaFxDeps
}

dependencies {
	implementation ('com.pixelduke:FXSkins:1.0.0') {
		exclude group: 'org.openjfx'
		exclude group: 'org.controlsfx'
	}
	implementation 'org.fxmisc.flowless:flowless:0.7.3'

	implementation 'org.ergoplatform:ergo-appkit_2.12:5.0.4'
	implementation 'com.typesafe:config:1.4.3'
	implementation 'org.slf4j:slf4j-simple:2.0.13'
	implementation 'com.grack:nanojson:1.9' // used for numerous HTTP APIs and ProgramData saving
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'info.debatty:java-string-similarity:2.0.0' // used for seed phrase words
	implementation 'com.google.zxing:core:3.5.3' // used for QR codes
	// We add the JavaFX dependencies to a custom configuration to later specify that the dependencies in this configuration shall be excluded from the shaded jar
	javaFxModules.forEach({ md -> javaFxDeps "org.openjfx:javafx-$md:$javaFxVersion:$platform" })
	implementation configurations.javaFxDeps.dependencies
}

jar {
	manifest {
		attributes("Specification-Version": project.version)
		attributes(
				"Version-Code": versionCode,
				/* Section name */ "Satergo")
	}
}

shadowJar {
	exclude 'LICENSE-2.0.txt', 'NOTICE'
	exclude 'META-INF/LICENSE.txt', 'META-INF/NOTICE.txt'
	dependencies {
		project.configurations.javaFxDeps.dependencies.forEach {
			// This does not exclude transitive dependencies
			// However, JavaFX does not have any dependencies
			exclude(dependency(it))
		}
	}
}

satergoRuntime {

	extraModules = ["jdk.crypto.ec", "java.naming", "jdk.charsets"]
	javaFxModules.forEach { extraModules.add("javafx." + it) }
	excludeModules = []
	extraModuleJars = configurations.javaFxDeps.files
	extraJlinkOptions = ["--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"]
	cleanupRuntimeContent = true
	cacheRuntimes = true

	proguardConfig = file("proguard.pro").toPath()
	proguardOutputName = "Satergo-${project.version}-shrunken.jar"

	includeJarInRuntime = !buildInstaller

	launcherScript {
		type = platform == "win" ? "bat" : "sh"
		name = "Satergo"
		mainClass = application.mainClass.get()
		defaultJvmOpts = ['-Dsatergo.launcher={APP_HOME}/bin/Satergo',
						  '-Dsatergo.packagePlatform=' + platform,
						  '-Dsatergo.packageType=' + (buildInstaller ? "installer" : "portable")]
		windowsConsole = false
	}
	if (buildInstaller)
		launcherScript = null

	switch (platform) {
		case "linux": {
			platformName = "linux-x64"
			jdkRuntimeURI = URI.create("https://github.com/adoptium/temurin22-binaries/releases/download/jdk-22.0.2%2B9/OpenJDK22U-jdk_x64_linux_hotspot_22.0.2_9.tar.gz")
			break
		}
		case "linux-aarch64": {
			platformName = "linux-aarch64"
			jdkRuntimeURI = URI.create("https://github.com/adoptium/temurin22-binaries/releases/download/jdk-22.0.2%2B9/OpenJDK22U-jdk_aarch64_linux_hotspot_22.0.2_9.tar.gz")
			break
		}
		case "win": {
			platformName = "windows-x64"
			jdkRuntimeURI = URI.create("https://github.com/adoptium/temurin22-binaries/releases/download/jdk-22.0.2%2B9/OpenJDK22U-jdk_x64_windows_hotspot_22.0.2_9.zip")
			break
		}
		case "mac": {
			platformName = "mac-x64"
			jdkRuntimeURI = URI.create("https://github.com/adoptium/temurin22-binaries/releases/download/jdk-22.0.2%2B9/OpenJDK22U-jdk_x64_mac_hotspot_22.0.2_9.tar.gz")
			jdkRuntimeRoot = "Contents/Home/"
			break
		}
		case "mac-aarch64": {
			platformName = "mac-aarch64"
			jdkRuntimeURI = URI.create("https://github.com/adoptium/temurin22-binaries/releases/download/jdk-22.0.2%2B9/OpenJDK22U-jdk_aarch64_mac_hotspot_22.0.2_9.tar.gz")
			jdkRuntimeRoot = "Contents/Home/"
			break
		}
		default: throw new IllegalArgumentException()
	}

	createArchive = !buildInstaller
	archiveOutputPath = file("runtimes/${project.name}-v${project.version}-${platformName}.zip").toPath()
	reproducibleArchive = true

	doBeforeArchival {
		// Delete unused native libraries
		String[] unusedLibs = ["splashscreen", "jsound"]
		for (final def lib in unusedLibs) {
			String path = platform == "win"
					? "bin/" + lib
					: "lib/lib" + lib
			if (platform == "win") {
				path += ".dll"
			} else if (platform == "mac" || platform == "mac-aarch64") {
				path += ".dylib"
			} else path += ".so"

			if (!delete(layout.buildDirectory.file("${runtimeDirectoryName}/${path}")))
				throw new RuntimeException("Could not delete native library " + lib + " (file " + path + ")")
		}
		// Create a convenient run file in the top level
		String buildDir = layout.buildDirectory.asFile.get().getPath()
		if (platform == "win") {
			def runFile = file("${buildDir}/${runtimeDirectoryName}/run.bat")
			runFile.write('@start /min "" "%~dp0\\bin\\' + project.name + '.bat" %*')
		} else {
			def runFile = file("${buildDir}/${runtimeDirectoryName}/run.${platform.startsWith("mac") ? "command" : "sh"}")
			runFile.write('#!/bin/sh\n' +
					'"$(dirname "$0")/bin/Satergo" "$@"')
			runFile.setExecutable(true)
		}
	}
}

satergoWinInstaller {
	def packagingDir = file("src/main/packaging").toPath()

	installerType = "MSI"

	appName = "Satergo"
	appVersion = project.version.toString()
	icoIconPath = packagingDir.resolve("windows-icon.ico")
	vendor = "Satergo"
	description = "The desktop wallet for the Ergo cryptocurrency"

	aboutUrl = "https://satergo.com"
	updateUrl = "https://satergo.com"

	windowsUpgradeUUID = "ef3fc1f4-414b-43e6-a2c2-cb4f7ccab4de"

	fileAssociations = [ packagingDir.resolve("erg-file-association.properties") ]

	extraArgs = [ "--resource-dir", packagingDir.resolve("windows-resources").toAbsolutePath().toString() ]

	outputDir = file("installers").toPath()

}

tasks.satergoWinInstaller {
	doFirst {
		if (!buildInstaller) throw new RuntimeException("Specify -PbuildInstaller to build an installer")
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

// Make builds reproducible
tasks.withType(AbstractArchiveTask).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}